id: radar_dsp_usrp_tx_rx
label: usrp_tx_rx
category: '[radar_dsp]'

templates:
  imports: from gnuradio import radar_dsp
  make: radar_dsp.usrp_tx_rx(${channel}, ${carrier_frequency}, ${sampling_rate}, ${samps_per_sym}, ${gain}, ${packet_len}, ${start_tx}, ${ts_buf})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: channel
  label: RF Frontend Channel
  dtype: int
- id: carrier_frequency
  label: Carrier Frequency
  dtype: float  # TODO: Check to see if float is easily converted to double in the arguments list
- id: sampling_rate
  label: Sampling Rate
  dtype: float
- id: samps_per_sym
  label: Samples per Symbol
  dtype: int
- id: gain
  label: TX Gain
  dtype: float
- id: packet_len
  label: Packet Length
  dtype: int
- id: start_tx
  label: Start in TX Mode
  dtype: bool
- id: ts_buf
  label: Training Sequence Buffer
  dtype: raw  # With "raw", the variable can be interpreted as a vector in C++

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
# inputs:
# - label: in
#   domain: stream
#   dtype: complex
#   vlen: ${packet_len}
# - label: tx_msg
#   domain: message
#   dtype: bool

outputs:
- label: out
  domain: stream
  dtype: complex


#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
